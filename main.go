package main

import (
	"encoding/json"
	"fmt"
	"io"
	"log"
	"os"
	"path/filepath"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/joho/godotenv"
)

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
type UserRecord struct {
	UserID    int64  `json:"user_id"`
	Username  string `json:"username,omitempty"`
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name,omitempty"`
	FirstSeen int64  `json:"first_seen"` // Unix timestamp
}

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
const (
	usersFile = "data/users.json"  // –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
	logsDir   = "logs"             // –ü–∞–ø–∫–∞ –¥–ª—è –ª–æ–≥–æ–≤
	maxAge    = 7 * 24 * time.Hour // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –ª–æ–≥–æ–≤ ‚Äî 7 –¥–Ω–µ–π
)

// –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ JSON
func loadUsers() map[int64]UserRecord {
	users := make(map[int64]UserRecord)

	file, err := os.Open(usersFile)
	if err != nil {
		if os.IsNotExist(err) {
			log.Println("users.json not found, will be created.")
			return users
		}
		log.Printf("Error opening users.json: %v", err)
		return users
	}
	defer file.Close()

	decoder := json.NewDecoder(file)
	err = decoder.Decode(&users)
	if err != nil {
		log.Printf("Error decoding users.json: %v", err)
	}
	return users
}

// –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ JSON
func saveUsers(users map[int64]UserRecord) {
	log.Printf("üíæ –ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å users.json –≤: %s", usersFile)

	err := os.MkdirAll(filepath.Dir(usersFile), 0755)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏: %v", err)
		return
	}

	file, err := os.Create(usersFile)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ users.json: %v", err)
		return
	}
	defer file.Close()

	encoder := json.NewEncoder(file)
	encoder.SetIndent("", "  ")
	err = encoder.Encode(users)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ JSON: %v", err)
		return
	}

	log.Printf("‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ %d –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ %s", len(users), usersFile)
}

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –µ—â—ë –Ω–µ—Ç
func registerUser(users map[int64]UserRecord, user *tgbotapi.User) {
	if _, exists := users[user.ID]; exists {
		return
	}

	now := time.Now().Unix()
	username := ""
	if user.UserName != "" {
		username = user.UserName
	}

	users[user.ID] = UserRecord{
		UserID:    user.ID,
		Username:  username,
		FirstName: user.FirstName,
		LastName:  user.LastName,
		FirstSeen: now,
	}

	log.Printf("New user registered: ID=%d, Name=%s %s, Username=@%s",
		user.ID, user.FirstName, user.LastName, user.UserName)
}

// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞ –ª–æ–≥–∞ –ø–æ –¥–∞—Ç–µ
func getLogFileName(t time.Time) string {
	return filepath.Join(logsDir, "bot-"+t.Format("2006-01-02")+".log")
}

// –û—á–∏—â–∞–µ—Ç –ª–æ–≥–∏ —Å—Ç–∞—Ä—à–µ maxAge
func cleanupOldLogs() {
	now := time.Now()
	err := filepath.Walk(logsDir, func(path string, info os.FileInfo, err error) error {
		if err != nil {
			return err
		}
		if info.IsDir() {
			return nil
		}
		filename := info.Name()
		if strings.HasPrefix(filename, "bot-") && strings.HasSuffix(filename, ".log") {
			dateStr := strings.TrimSuffix(strings.TrimPrefix(filename, "bot-"), ".log")
			if logDate, err := time.Parse("2006-01-02", dateStr); err == nil {
				if now.Sub(logDate) > maxAge {
					os.Remove(path)
					log.Printf("üßπ Deleted old log: %s", path)
				}
			}
		}
		return nil
	})
	if err != nil {
		log.Printf("‚ö†Ô∏è Error during log cleanup: %v", err)
	}
}

// setupLogger –∑–∞–ø—É—Å–∫–∞–µ—Ç –ª–æ–≥–≥–µ—Ä –∏ —Ñ–æ–Ω–æ–≤—É—é —Ä–æ—Ç–∞—Ü–∏—é
func setupLogger() *os.File {
	// –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É
	if err := os.MkdirAll(logsDir, 0755); err != nil {
		log.Fatalf("‚ùå Failed to create logs directory: %v", err)
	}

	// –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª
	logFile := openLogFile()
	multiWriter := io.MultiWriter(logFile, os.Stdout)
	log.SetOutput(multiWriter)
	log.SetFlags(log.Ldate | log.Ltime | log.Lshortfile)

	// –§–æ–Ω–æ–≤–∞—è –≥–æ—Ä—É—Ç–∏–Ω–∞: —Ä–æ—Ç–∞—Ü–∏—è –ª–æ–≥–æ–≤ + –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö
	go func() {
		ticker := time.NewTicker(10 * time.Minute) // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
		defer ticker.Stop()

		for range ticker.C {
			// 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–º–µ–Ω–∏—Ç—å —Ñ–∞–π–ª –ª–æ–≥–∞
			newFile := reopenLogFileIfNewDay(logFile)
			if newFile != nil {
				logFile.Close()
				multiWriter := io.MultiWriter(newFile, os.Stdout)
				log.SetOutput(multiWriter)
				logFile = newFile
			}

			// 2. –†–∞–∑ –≤ —Å—É—Ç–∫–∏ (–∏–ª–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –Ω–æ–≤–æ–≥–æ –¥–Ω—è) —á–∏—Å—Ç–∏–º —Å—Ç–∞—Ä—ã–µ –ª–æ–≥–∏
			now := time.Now()
			// –ï—Å–ª–∏ –≤—Ä–µ–º—è –±–ª–∏–∑–∫–æ –∫ 00:00‚Äì00:10 ‚Äî —á–∏—Å—Ç–∏–º (–∑–∞—â–∏—Ç–∞ –æ—Ç –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞)
			if now.Hour() == 0 && now.Minute() < 15 {
				cleanupOldLogs()
			}
		}
	}()

	return logFile
}

// openLogFile –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —Ñ–∞–π–ª –ø–æ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–µ
func openLogFile() *os.File {
	filename := getLogFileName(time.Now())
	file, err := os.OpenFile(filename, os.O_CREATE|os.O_WRONLY|os.O_APPEND, 0644)
	if err != nil {
		log.Printf("‚ùå Failed to open log file %s: %v", filename, err)
		log.Fatal(err)
	}
	return file
}

// reopenLogFileIfNewDay –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ —Å–º–µ–Ω–∏—Ç—å —Ñ–∞–π–ª
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç *os.File, –µ—Å–ª–∏ –¥–∞—Ç–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å, –∏–Ω–∞—á–µ nil
func reopenLogFileIfNewDay(currentFile *os.File) *os.File {
	currentDate := time.Now().Format("2006-01-02")
	fileInfo, err := currentFile.Stat()
	if err != nil {
		log.Printf("‚ö†Ô∏è Cannot stat current log file: %v", err)
		return nil
	}
	fileDate := fileInfo.ModTime().Format("2006-01-02")

	if currentDate != fileDate {
		log.Println("üîÑ Date changed, rotating log file...")
		newFile := openLogFile()
		return newFile
	}
	return nil
}

func main() {
	// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞ (—Å —Ä–æ—Ç–∞—Ü–∏–µ–π)
	logFile := setupLogger()
	defer logFile.Close()

	// –ó–∞–≥—Ä—É–∂–∞–µ–º .env
	err := godotenv.Load("/root/.env")
	if err != nil {
		log.Println("‚ö†Ô∏è .env file not found, using environment variables")
	}

	botToken := os.Getenv("BOT_TOKEN")
	if botToken == "" {
		log.Fatal("‚ùå BOT_TOKEN is not set in environment")
	}

	// –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞
	bot, err := tgbotapi.NewBotAPI(botToken)
	if err != nil {
		log.Fatalf("‚ùå Failed to create Telegram bot: %v", err)
	}

	log.Printf("‚úÖ Bot is running as @%s", bot.Self.UserName)

	// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	users := loadUsers()
	log.Printf("üìÅ Loaded %d users from storage", len(users))

	// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := bot.GetUpdatesChan(u)

	log.Println("üì® Bot is listening for messages...")

	for update := range updates {
		if update.Message == nil {
			continue
		}

		// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		registerUser(users, update.Message.From)
		saveUsers(users) // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ä–∞–∑—É

		// –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
		userID := update.Message.From.ID
		chatID := update.Message.Chat.ID

		response := fmt.Sprintf("<b>Your user ID:</b> <code>%d</code>\n<b>Current chat ID:</b> <code>%d</code>", userID, chatID)

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
		if update.Message.ForwardSenderName != "" {
			response += fmt.Sprintf("\n<b>Forwarded from:</b> [hidden name] %s", update.Message.ForwardSenderName)
		} else if update.Message.ForwardFrom != nil {
			response += fmt.Sprintf("\n<b>Forwarded from:</b> <code>%d</code>", update.Message.ForwardFrom.ID)
		} else if update.Message.ForwardFromChat != nil {
			response += fmt.Sprintf("\n<b>Forwarded from chat:</b> <code>%d</code>", update.Message.ForwardFromChat.ID)
		}

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
		msg := tgbotapi.NewMessage(chatID, response)
		msg.ParseMode = "HTML"
		_, err := bot.Send(msg)
		if err != nil {
			log.Printf("‚ùå Failed to send message to %d: %v", chatID, err)
		}
	}
}
